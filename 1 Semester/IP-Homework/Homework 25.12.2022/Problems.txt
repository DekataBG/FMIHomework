Домашно по УП КН 22/23, Вариант 1

Задача 1

След като Мишо започна да осъзнава, че и със статистиката няма да го бъде, той се хвана продавач в кварталния супермаркет. През първите две седмици той няма проблеми с плащанията, тъй като хората масово плащат с карта. Сега обаче е седмо число на месеца и пенсионерите си получават пенсиите. Те плащат в брой, защото за тях е много трудно използването на карта (Съжалявам бабо, ако някога прочетеш тази задача). 
Та идва баба Данче комшийката да си напазарува храна и всякакви неща от първа необходимост, както и бонбоните, с които тя винаги черпи Мишо. Нещата в кошницата й  струват N лева, а тя вади K лева, където N и K са реални положителни числа. Интересен факт за баба Данче е, че тя не вижда много много и може да е извадила по-малко пари, отколкото трябва. Ако това е така, изведете на екрана “Money is not enough”. Ако парите са точно, изведете “Alright”, а ако са повече изведете “Here is your change: ” и на долните редове. По какъв начин трябва да бъдат дадени парите, защото както знаете Мишо не е добре с математиката, а иска баба Данче да продължи да го черпи. Възможните банкноти и монети са: 1 ст. 2 ст. 5 ст. 10 ст. 20 ст. 50 ст. 1 лв. 2 лв. 5 лв. 10 лв. 20 лв. 50 лв. 100 лв. Програмата трябва да извежда в начина за връщане само тези, от които има поне по една, и броя им.

Пример:

Вход:							Вход:
5.75							7.00
10							7.00

Изход:							Изход:
Here is your change:					Alright
1 - 5 st
1 - 20 st
2 - 2 lv






















Домашно по УП КН 22/23, Вариант 1

Задача 2

	Напишете функция bool path( int[8][8] maze, int start_x, int start_y, int end_x, int end_y ), която с помощта на алгоритъма за търсене в дълбочина, реализиран с рекурсия, да намира дали има път между 2 точки в лабиринт. Двумерният масив maze се състои от нули и единици, като можем да “стъпваме” само на нулите и да се придвижваме само “нагоре, надолу, наляво и надясно” без диагонални стъпки. Следващите параметри са съответно координатите на двете точки, между които търсим път. 

Бонус: да изведе път на екрана, ако има такъв.

Примерен лабиринт:
int maze[8][8] = {
{0, 1, 0, 1, 1, 0, 1, 0}
{0, 1, 0, 0, 0, 0, 1, 1}
{0, 1, 1, 0, 1, 0, 1, 0}
{0, 1, 0, 0, 0, 0, 0, 1}
{0, 0, 0, 1, 1, 1, 0, 0}
{0, 1, 0, 0, 0, 1, 1, 0}
{0, 1, 0, 1, 0, 0, 1, 1}
{0, 1, 0, 0, 1, 0, 0, 0}
}

Пример:
path(maze, 0, 0, 0, 2)

{
{s, 1, e, 1, 1, 0, 1, 0}
{p, 1, p, p, 0, 0, 1, 1}
{p, 1, 1, p, 1, 0, 1, 0}
{p, 1, p, p, 0, 0, 0, 1}
{p, p, p, 1, 1, 1, 0, 0}
{0, 1, 0, 0, 0, 1, 1, 0}
{0, 1, 0, 1, 0, 0, 1, 1}
{0, 1, 0, 0, 1, 0, 0, 0}
}

Изход: true


Бонус:
(0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (4, 1) -> (4, 2) -> (3, 2) -> (3, 3) -> (2, 3) -> (1, 3) -> (1, 2) -> (0, 2)

Можете да се запознаете с алгоритъма тук: https://en.wikipedia.org/wiki/Depth-first_search. 
